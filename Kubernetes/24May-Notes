MultiContainer Pod

apiVersion: v1
kind: Pod
metadata:
  name: pod1
  labels:
    author: sonal
    env: dev
    app: webserver
spec:
 containers:
  - name: c1
    image: nginx
  - name: c2
    image: tomcat
  - name: c3
    image: ubuntu
    command: ["bash","-c", "sleep 6000"]

============================================
ReplicaSet YAML
============================================

kind: ReplicaSet
apiVersion: apps/v1
metadata:
 name: myrs
spec:
 replicas: 3 # desired number of PODs
 selector: # query to select pods with matching labels
  matchLabels:
   type: webserver
 template: #heretemplate is Pod template,i.e.what should be on the POD,you are writing Pod details
  metadata:
   labels: # here labels is key and value given by user to group similar pods
    type: webserver
    app: java
    author: sonal
  spec: # this is pod specification
   containers:
    - name: c1
      image: nginx

=======================================================
Service Demo
==================================================

Lab Execution Steps:
Delete all exisitng replicaSet
kubectl delete replicaset myrs

Create Replicas using ReplicaSet YAML file
kubectl create -f https://raw.githubusercontent.com/Sonal0409/Container-Orchestration-using-Kubernetes/main/Day2-Notes/ReplicaSet-Demo/ReplicaSet.yml

kubectl get pods

kubectl get pods --show-labels

Create ClusterIp service
kubectl create -f https://raw.githubusercontent.com/Sonal0409/Container-Orchestration-using-Kubernetes/main/Day2-Notes/ServicesDemo/ClusterIPDemo/Service1.yml

Validate:
kubectl get svc

Note down the service details:

mysvc1 ClusterIP 10.102.177.192 80/TCP 6m2s

Validate if a new pod is able to communicate with ngix replicas using cluster IP
create a new ubuntu pod for testing:

kubectl create -f https://raw.githubusercontent.com/Sonal0409/Container-Orchestration-using-Kubernetes/main/Day2-Notes/ServicesDemo/ClusterIPDemo/ubuntupod.yml

Check ubuntu pod is running:

kubectl get pods

Log into Ubuntu pod

kubectl exec -it ubuntupod -- bash

Execute command to install curl package

apt-get update && apt-get install curl -y

Send a request to cluster ip, it will forward the request to any of the pod with target port as 80 and label as type=webserver

curl 10.102.177.192:80
